// Copyright 2016 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package pb;

message Record {
  optional MetaData metadata = 1;

  optional Process process = 2;
  optional BuildTarget build_target = 3;
  optional ConfigureOutput configure_output = 4;
  optional InstalledFile installed_file = 5;
}

message MetaData {
  optional string project_root = 1;

  // The original build directory, relative to the project root.  Only set if
  // different to the project root.
  optional string build_dir = 2;

  optional string project_name = 3;

  optional string redirect_root = 4;
}

message File {
  enum Access {
    CREATED = 1;
    DELETED = 2;
    MODIFIED = 3;
    READ = 4;
    WRITTEN_BUT_UNCHANGED = 5;
  }

  // Either absolute or relative to the project root.
  optional string filename = 1;

  // If this file was rename()d, filename is the new path and renamed_from is
  // the old path.
  optional string renamed_from = 2;

  // What happened to this file.
  optional Access access = 3;

  // The sha1 hashes of this file's contents immediately before the first time
  // the process opened it and immediately after the process exited.  Each field
  // is not present if the file did not exist at those times (ie. it was
  // created or deleted by the process).
  optional bytes sha1_before = 4;
  optional bytes sha1_after = 5;

  optional int32 open_ordering = 6;
  optional int32 close_ordering = 7;

  // The filename was outside the project root and the tracer was configured to
  // redirect file accesses to another directory.
  optional bool redirected = 8;
}

message Process {
  // An ID unique to this trace file.  Not related to the process' PID.
  optional int32 id = 1;

  // ID of the process that spawned this one.  Unset if this is the root
  // process.
  optional int32 parent_id = 2;

  // Orderings that specify when this process began and ended relative to other
  // processes in this trace.
  optional int32 begin_ordering = 3;
  optional int32 end_ordering = 4;

  // The path of the executable.  Either absolute or relative to the project
  // root.
  optional string filename = 5;

  // All commandline arguments, including the name used to invoke the executable
  // as argv[0].
  repeated string argv = 6;

  // Either absolute or relative to the project root.
  optional string working_directory = 7;

  optional int32 exit_code = 8;

  // All the files opened by the processes while it was running.
  repeated File files = 9;

  // IDs of child processes started by this process.
  repeated int32 child_process_id = 10;
}

message BuildTarget {
  optional string qualified_name = 1;

  repeated Reference srcs = 2;
  repeated Reference outputs = 3;  // All RELATIVE_TO_PROJECT_ROOT.

  optional CCompile c_compile = 4;
  optional CLink c_link = 5;

  optional bool install = 6;
}

message Definition {
  optional string name = 1;
  optional string value = 2;
}

message CCompile {
  repeated string flag = 1;
  repeated Definition definition = 2;
  repeated Reference header_search_path = 3;
  optional bool is_cc = 4;
  repeated Reference headers = 5;
}

message CLink {
  repeated string flag = 1;
  repeated Reference library_search_path = 2;
  optional bool is_library = 3;
  optional bool is_cc = 4;
}

message Reference {
  enum Type {
    // The qualified_name of a BuildTarget in this project.
    BUILD_TARGET = 1;

    // The name of a system library.  Can be used with -l.
    LIBRARY = 2;

    // An absolute filename somewhere in the system.  Not within the project
    // directory.
    ABSOLUTE = 3;

    // A filename relative to the project root.  Does not start with a /.
    RELATIVE_TO_PROJECT_ROOT = 4;

    // A filename relative to the build dir.  Does not start with a /.
    RELATIVE_TO_BUILD_DIR = 5;
  }
  optional Type type = 1;
  optional string name = 2;
}

message ConfigureOutput {
  // Files generated by the configure step.
  repeated Reference generated_file = 1;
}

message InstalledFile {
  enum Type {
    HEADER = 1;
    LIBRARY = 2;
    BINARY = 3;
  }
  optional Type type = 1;
  optional Reference original = 2;
  optional Reference target = 3;
}
